#!/bin/sh
# Pre-commit hook: linting and formatting only

set -e

echo "Running pre-commit checks..."

# Check if this is an initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Check if there are any staged changes
if ! git diff --cached --quiet; then
    echo "Found staged changes, proceeding with checks..."
    
    # Generate SQLC code first (since it's not in git)
    echo "Generating SQLC code..."
    if ! sqlc generate -f internal/scraper/db/sqlc.yaml; then
        echo "❌ Failed to generate SQLC code"
        exit 1
    fi

    echo "Running go mod tidy..."
    go mod tidy
    git add go.mod go.sum

    # Get list of staged Go files
    STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM $against | grep '\.go$' || true)

    if [ -n "$STAGED_GO_FILES" ]; then
        echo "Formatting Go files..."
        
        # Format Go files
        echo "$STAGED_GO_FILES" | xargs gofmt -w -s
        echo "$STAGED_GO_FILES" | xargs goimports -w

        PKG_DIRS=$(echo "$STAGED_GO_FILES" | xargs -n1 dirname | sort -u)
        for pkg in $PKG_DIRS; do
            echo "Running go vet on staged packages..."
            go vet "./$pkg"
            echo "Running golangci-lint on staged packages..."
            golangci-lint run --fix "$pkg"
        done

        # Add any files that might have fixed
        echo "$STAGED_GO_FILES" | xargs git add
    fi

    # Check for other file types
    STAGED_OTHER_FILES=$(git diff --cached --name-only --diff-filter=ACM $against | grep -v '\.go$' || true)

    if [ -n "$STAGED_OTHER_FILES" ]; then
        echo "Checking and formatting other files..."
        
        # Auto-fix YAML files with yamlfmt
        YAML_FILES=$(echo "$STAGED_OTHER_FILES" | grep '\.ya\?ml$' || true)
        if [ -n "$YAML_FILES" ]; then
            if command -v yamlfmt >/dev/null 2>&1; then
                echo "Auto-fixing YAML files with yamlfmt..."
                echo "$YAML_FILES" | xargs yamlfmt
                echo "$YAML_FILES" | xargs git add
                echo "YAML files formatted"
            else
                echo "⚠️  yamlfmt not found, skipping YAML formatting"
            fi
        fi
        
        # Validate JSON files
        JSON_FILES=$(echo "$STAGED_OTHER_FILES" | grep '\.json$' || true)
        if [ -n "$JSON_FILES" ]; then
            echo "Validating JSON files..."
            for file in $JSON_FILES; do
                if command -v jq >/dev/null 2>&1; then
                    if ! jq empty "$file"; then
                        echo "❌ Invalid JSON syntax in: $file"
                        echo "See above for error details."
                        exit 1
                    fi
                else
                    # Fallback to Go, but print error details
                    if ! go run -c 'package main
import (
    "encoding/json"
    "os"
    "fmt"
)
func main() {
    var v interface{}
    dec := json.NewDecoder(os.Stdin)
    if err := dec.Decode(&v); err != nil {
        fmt.Fprintf(os.Stderr, "JSON error: %v\n", err)
        os.Exit(1)
    }
}' < "$file"; then
                        echo "❌ Invalid JSON syntax in: $file"
                        echo "See above for error details."
                        exit 1
                    fi
                fi
            done
            echo "JSON files validated"
        fi
    fi

    echo "✅ Pre-commit checks passed!"
else
    echo "⚠️  No staged changes found. Skipping pre-commit checks."
    exit 0
fi